library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_unsigned.all;
entity memory is -- use unsigned for memory address
	port (
		address : in std_logic_vector(15 downto 0);
		write_data : in std_logic_vector(15 downto 0);
		MemWrite : in std_logic;
		read_data : out std_logic_vector(15 downto 0)
	);
end memory;

architecture Behavioral of memory is
	type mem_array is array(0 to 511) of std_logic_vector(15 downto 0);
	-- define type, for memory arrays
begin
	mem_process : process (address, write_data)
		-- initialize data memory, X denotes hexadecimal number
		variable data_mem : mem_array := (
		--16 bits
		--TEST:
		--ADI √
		--LD  √
		--Store nope
		--INC √
		--NOT √
		--ADD √
		--JUMP √
		--CONDITION BRACH √
		--SHIFT √
		X"0000",                                                                    ------0
		"0001000"&"000"&"000"&"101",---Unconditionally branch to main program       ------1
		--Data in Memory
		--Test load
		"0000000"&"000"&"000"&"100",                                                ------2
		"0000000"&"000"&"000"&"101",                                                ------3
		--Test store
		"0000000"&"000"&"000"&"000",                                                ------4
		"0000000"&"000"&"000"&"000",                                                ------5
		--R6 <= 6 test whether unconditional branch works or not
		"0000110"&"110"&"000"&"110",---R6 <= 6                                      ------6
		                            ---        
		--Main Program
	    "0000110"&"000"&"000"&"000",---R0 <= 0                                      ------7
        "0000110"&"001"&"000"&"001",---R1 <= 1                                      ------8
        "0000110"&"010"&"000"&"010",---R2 <= 2                                      ------9
        "0000110"&"011"&"000"&"000",---R3 <= 0                                      ------10
        "0000001"&"100"&"010"&"000",---LDR R4,[Memory[2]]=4                         ------11
        "0000001"&"101"&"011"&"000",---LDR R5,[Memory[3]]=5                         ------12
        "0000110"&"111"&"000"&"111",---R7 <= 7                                      ------13
        "0001001"&"000"&"000"&"011",---CMP RO,#0                                    ------14
                                    ---BEQ ifeZero   
        "0000110"&"110"&"000"&"110",---LDR R6,=6                                    ------15
        "0000101"&"111"&"001"&"010",---R7 = R1 + R2 1+2=3                           ------16
        "0000011"&"111"&"111"&"000",---R7 = R7+1    3+1=4                           ------17
--ifZero
        "0000100"&"011"&"011"&"000",---RO = NOT RO                                  ------19
        "0000111"&"001"&"000"&"001",---R1 = LSR R1 = LSR '1' = 2                    ------20
        "0000111"&"001"&"000"&"001",---R1 = LSR R1 = LSR '2' = 4                    ------21
                                                                                    ------21
                                                                                    ------22
                                                                                    ------23
                                                                                    ------24
                                                                                    ------25
            --X"0000", X"0000", X"0000", X"0000",                                   ------26 
            --X"0000", X"0000", X"0000", X"0000", 
            --X"0000", X"0000", X"0000", X"0000", 
            --X"0000", X"0000", X"0000", X"0000", 
            --Module 1
            
            X"0000",X"0000",X"0000",
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000", 
			X"0000", X"0000", X"0000", X"0000"
		);
		variable addr : integer range 0 to 511;
	begin
		-- the following type conversion function is in std_logic_arith
		addr := conv_integer(address(8 downto 0));
		if MemWrite = '1' then
			data_mem(addr) := write_data;
		else
			read_data <= data_mem(addr) after 10 ns;
		end if;
	end process;
end Behavioral;
 