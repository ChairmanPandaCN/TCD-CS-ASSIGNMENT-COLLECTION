LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

ENTITY controlMemory IS
	PORT (
		IN_CAR : IN std_logic_vector(7 DOWNTO 0);
		MW : OUT std_logic;
		MM : OUT std_logic;
		RW : OUT std_logic;
		MD : OUT std_logic;
		FS : OUT std_logic_vector(4 DOWNTO 0);
		MB : OUT std_logic;
		TB : OUT std_logic;
		TA : OUT std_logic;
		TD : OUT std_logic;
		PL : OUT std_logic;
		PI : OUT std_logic;
		IL : OUT std_logic;
		MC : OUT std_logic;
		MS : OUT std_logic_vector(2 DOWNTO 0);
		NA : OUT std_logic_vector(7 DOWNTO 0)
	);
END controlMemory;

ARCHITECTURE Behavioral OF controlMemory IS
	TYPE mem_array IS ARRAY(0 TO 255) OF std_logic_vector(27 DOWNTO 0);
BEGIN
	memory_m : PROCESS (IN_CAR)
		VARIABLE control_mem : mem_array := (
		--NA		   MS     MC    IL    PI    PL    TD    TA    TB    MB	   FS      MD     RW    MM    MW
		--
		"00000000" & "000" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00000" & "0" & "0" & "0" & "0",
		--LOAD         1   
		"11000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00000" & "1" & "1" & "0" & "0",
		--STORE        2 
		"11000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00000" & "0" & "0" & "0" & "1",
		--INCREMENT    3   WORK PORPERLY
		"11000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00001" & "0" & "1" & "0" & "0",
		--NOT          4   WORK PORPERLY
		"11000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "01110" & "0" & "1" & "0" & "0",
		--ADD          5   WORK PORPERLY
		"11000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00010" & "0" & "1" & "0" & "0",
		--ADI          6   WORK PORPERLY
		"11000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "1" & "10000" & "0" & "1" & "0" & "0",
		--SHIFT RIGHT  7   WORK PORPERLY
		"11000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "11000" & "0" & "1" & "0" & "0",
		--Unconditional Branch  8
		"11000000" & "001" & "0" & "0" & "0" & "1" & "0" & "0" & "0" & "1" & "00010" & "0" & "1" & "0" & "0",
		--BEQ             9
		"00001000" & "100" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00000" & "0" & "1" & "0" & "0",
		"11000000" & "001" & "0" & "0" & "0" & "1" & "0" & "0" & "0" & "1" & "00000" & "0" & "1" & "0" & "0",
		--             B
		"00000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00010" & "0" & "1" & "0" & "0",
		--             C
		"00000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00010" & "0" & "1" & "0" & "0",
		--             D
		"00000000" & "001" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00010" & "0" & "1" & "0" & "0",
		--             E
        "00000000" & "000" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00000" & "0" & "0" & "0" & "0",
		--             F
        "00000000" & "000" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00000" & "0" & "0" & "0" & "0",

		--M-1 
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",

		--M-2
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-3
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-4
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-5
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-6
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-7
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-8
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-9
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-A
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-B
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-C
		--NA		  MS      MC   IL    PI    PL    TD    TA    TB     MB	   FS      MD     RW    MM    MW
		--IF  Instruction Fetch (Gets next instruction into IR)
		"11000001" & "000" & "0" & "1" & "1" & "0" & "0" & "0" & "0" & "0" & "00000" & "0" & "0" & "1" & "0",
		--EXO Instruction Decode (Gets next opcode into CAR)	
		"00000000" & "001" & "1" & "0" & "0" & "0" & "0" & "0" & "0" & "0" & "00000" & "0" & "0" & "0" & "0",
		
		x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-D
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-E
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		--M-F
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000",
		x"0000000", x"0000000", x"0000000", x"0000000"
		);

		VARIABLE addr : INTEGER;
		VARIABLE control_out : std_logic_vector(27 DOWNTO 0);
	BEGIN
		addr := conv_integer(IN_CAR);
		control_out := control_mem(addr);
		MW <= control_out(0);
		MM <= control_out(1);
		RW <= control_out(2);
		MD <= control_out(3);
		FS <= control_out(8 DOWNTO 4);
		MB <= control_out(9);
		TB <= control_out(10);
		TA <= control_out(11);
		TD <= control_out(12);
		PL <= control_out(13);
		PI <= control_out(14);
		IL <= control_out(15);
		MC <= control_out(16);
		MS <= control_out(19 DOWNTO 17);
		NA <= control_out(27 DOWNTO 20);
	END PROCESS;
END Behavioral;